// reasoning_service.proto

syntax = "proto3";

package autoagent_api;

import "autoagent_api/common.proto";
import "buf/validate/validate.proto";

// =============================================================================
// Le Service de Raisonnement (Reasoning Service)
//
// Interface de haut niveau pour les capacités de raisonnement de l'IA.
// Il abstrait la complexité du prompt engineering et de l'interaction avec les LLM.
// =============================================================================
service ReasoningService {
  // Demande au service de générer une liste d'options de tâches potentielles.
  rpc GenerateOptions(GenerateOptionsRequest) returns (GenerateOptionsResponse);

  // Demande au service de scorer une liste de tâches potentielles.
  rpc ScoreOptions(ScoreOptionsRequest) returns (ScoreOptionsResponse);
}

// --- Messages pour le RPC GenerateOptions ---

message GenerateOptionsRequest {
  string request_id = 1 [(buf.validate.field).string.uuid = true];
  string mission_id = 2 [(buf.validate.field).string.uuid = true];
  string current_task_prompt = 3 [(buf.validate.field).string.min_len = 10];
  string factual_context = 4; // Optionnel, donc pas de règle.
  string generation_directive = 5 [(buf.validate.field).string.min_len = 10];
}

message GenerateOptionsResponse {
  repeated PotentialTask potential_tasks = 1 [(buf.validate.field).repeated.min_items = 1];
}

// --- Messages pour le RPC ScoreOptions ---

message ScoreOptionsRequest {
  string request_id = 1 [(buf.validate.field).string.uuid = true];
  string mission_id = 2 [(buf.validate.field).string.uuid = true];
  string shared_context = 3; // Optionnel.
  repeated PotentialTask tasks_to_score = 4 [(buf.validate.field).repeated.min_items = 1];
}

message ScoreOptionsResponse {
  // La logique applicative doit vérifier que len(results) == len(request.tasks_to_score).
  repeated ScoreResult results = 1 [(buf.validate.field).repeated.min_items = 1];
}

// Un résultat de scoring pour une seule tâche.
// Peut contenir soit un succès (ScoredOption), soit une erreur.
message ScoreResult {
  string id = 1 [(buf.validate.field).string.uuid = true];
  oneof result {
    option (buf.validate.oneof).required = true; // On doit avoir soit un succès, soit une erreur.
    ScoredOption success = 2;
    Error error = 3;
  }
}

// Contient les détails d'un scoring réussi pour une option.
message ScoredOption {
  Score score = 1 [(buf.validate.field).required = true];
  string rationale = 2 [(buf.validate.field).string.min_len = 10];
  float model_confidence = 3 [(buf.validate.field).float = {
    gte: 0.0
    lte: 1.0
  }];
}

// Les scores quantitatifs objectifs (1) estimés pour une tâche..
message Score {
  float predicted_complexity = 1 [(buf.validate.field).float = {
    gte: 1.0
    lte: 10.0
  }]; // Complexité de la tâche, 1-10.
  float predicted_success_probability = 2 [(buf.validate.field).float = {
    gte: 0.0
    lte: 1.0
  }]; // Probabilité de succès, 0-1.
  float predicted_cost = 3 [(buf.validate.field).float = {
    gte: 1.0
    lte: 10.0
  }]; // Coût estimé, 1-10.
}
