# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from autoagent_api import agent_service_pb2 as autoagent__api_dot_agent__service__pb2


class AgentSessionServiceStub(object):
    """=============================================================================
    Le Service de Session d'Agent (Agent Session Service)

    Gère des sessions de travail interactives et état-major pour des agents autonomes.
    Le client (Go/Temporal) agit comme un superviseur, donnant des objectifs
    et recevant des résultats d'étape.
    =============================================================================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartSession = channel.unary_unary(
                '/autoagent_api.AgentSessionService/StartSession',
                request_serializer=autoagent__api_dot_agent__service__pb2.StartSessionRequest.SerializeToString,
                response_deserializer=autoagent__api_dot_agent__service__pb2.StartSessionResponse.FromString,
                _registered_method=True)
        self.ExecuteStep = channel.stream_stream(
                '/autoagent_api.AgentSessionService/ExecuteStep',
                request_serializer=autoagent__api_dot_agent__service__pb2.ExecuteStepRequest.SerializeToString,
                response_deserializer=autoagent__api_dot_agent__service__pb2.ExecuteStepResponse.FromString,
                _registered_method=True)
        self.StopSession = channel.unary_unary(
                '/autoagent_api.AgentSessionService/StopSession',
                request_serializer=autoagent__api_dot_agent__service__pb2.StopSessionRequest.SerializeToString,
                response_deserializer=autoagent__api_dot_agent__service__pb2.StopSessionResponse.FromString,
                _registered_method=True)


class AgentSessionServiceServicer(object):
    """=============================================================================
    Le Service de Session d'Agent (Agent Session Service)

    Gère des sessions de travail interactives et état-major pour des agents autonomes.
    Le client (Go/Temporal) agit comme un superviseur, donnant des objectifs
    et recevant des résultats d'étape.
    =============================================================================
    """

    def StartSession(self, request, context):
        """Démarre une nouvelle session d'agent, provisionne les ressources (sandbox)
        et retourne un ID de session unique.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteStep(self, request_iterator, context):
        """Exécute une "étape" de travail au sein d'une session existante.
        C'est un RPC avec streaming bi-directionnel pour l'observabilité en temps réel.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopSession(self, request, context):
        """Termine une session, finalise le travail et libère les ressources.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentSessionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartSession': grpc.unary_unary_rpc_method_handler(
                    servicer.StartSession,
                    request_deserializer=autoagent__api_dot_agent__service__pb2.StartSessionRequest.FromString,
                    response_serializer=autoagent__api_dot_agent__service__pb2.StartSessionResponse.SerializeToString,
            ),
            'ExecuteStep': grpc.stream_stream_rpc_method_handler(
                    servicer.ExecuteStep,
                    request_deserializer=autoagent__api_dot_agent__service__pb2.ExecuteStepRequest.FromString,
                    response_serializer=autoagent__api_dot_agent__service__pb2.ExecuteStepResponse.SerializeToString,
            ),
            'StopSession': grpc.unary_unary_rpc_method_handler(
                    servicer.StopSession,
                    request_deserializer=autoagent__api_dot_agent__service__pb2.StopSessionRequest.FromString,
                    response_serializer=autoagent__api_dot_agent__service__pb2.StopSessionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'autoagent_api.AgentSessionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('autoagent_api.AgentSessionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgentSessionService(object):
    """=============================================================================
    Le Service de Session d'Agent (Agent Session Service)

    Gère des sessions de travail interactives et état-major pour des agents autonomes.
    Le client (Go/Temporal) agit comme un superviseur, donnant des objectifs
    et recevant des résultats d'étape.
    =============================================================================
    """

    @staticmethod
    def StartSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/autoagent_api.AgentSessionService/StartSession',
            autoagent__api_dot_agent__service__pb2.StartSessionRequest.SerializeToString,
            autoagent__api_dot_agent__service__pb2.StartSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteStep(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/autoagent_api.AgentSessionService/ExecuteStep',
            autoagent__api_dot_agent__service__pb2.ExecuteStepRequest.SerializeToString,
            autoagent__api_dot_agent__service__pb2.ExecuteStepResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/autoagent_api.AgentSessionService/StopSession',
            autoagent__api_dot_agent__service__pb2.StopSessionRequest.SerializeToString,
            autoagent__api_dot_agent__service__pb2.StopSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
