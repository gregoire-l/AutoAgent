# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from autoagent.api import reasoning_service_pb2 as autoagent_dot_api_dot_reasoning__service__pb2


class ReasoningServiceStub(object):
    """=============================================================================
    Le Service de Raisonnement (Reasoning Service)

    Interface de haut niveau pour les capacités de raisonnement de l'IA.
    Il abstrait la complexité du prompt engineering et de l'interaction avec les LLM.
    =============================================================================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateOptions = channel.unary_unary(
                '/autoagent.api.ReasoningService/GenerateOptions',
                request_serializer=autoagent_dot_api_dot_reasoning__service__pb2.GenerateOptionsRequest.SerializeToString,
                response_deserializer=autoagent_dot_api_dot_reasoning__service__pb2.GenerateOptionsResponse.FromString,
                _registered_method=True)
        self.ScoreOptions = channel.unary_unary(
                '/autoagent.api.ReasoningService/ScoreOptions',
                request_serializer=autoagent_dot_api_dot_reasoning__service__pb2.ScoreOptionsRequest.SerializeToString,
                response_deserializer=autoagent_dot_api_dot_reasoning__service__pb2.ScoreOptionsResponse.FromString,
                _registered_method=True)


class ReasoningServiceServicer(object):
    """=============================================================================
    Le Service de Raisonnement (Reasoning Service)

    Interface de haut niveau pour les capacités de raisonnement de l'IA.
    Il abstrait la complexité du prompt engineering et de l'interaction avec les LLM.
    =============================================================================
    """

    def GenerateOptions(self, request, context):
        """Demande au service de générer une liste d'options de tâches potentielles.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScoreOptions(self, request, context):
        """Demande au service de scorer une liste de tâches potentielles.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReasoningServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateOptions': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateOptions,
                    request_deserializer=autoagent_dot_api_dot_reasoning__service__pb2.GenerateOptionsRequest.FromString,
                    response_serializer=autoagent_dot_api_dot_reasoning__service__pb2.GenerateOptionsResponse.SerializeToString,
            ),
            'ScoreOptions': grpc.unary_unary_rpc_method_handler(
                    servicer.ScoreOptions,
                    request_deserializer=autoagent_dot_api_dot_reasoning__service__pb2.ScoreOptionsRequest.FromString,
                    response_serializer=autoagent_dot_api_dot_reasoning__service__pb2.ScoreOptionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'autoagent.api.ReasoningService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('autoagent.api.ReasoningService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ReasoningService(object):
    """=============================================================================
    Le Service de Raisonnement (Reasoning Service)

    Interface de haut niveau pour les capacités de raisonnement de l'IA.
    Il abstrait la complexité du prompt engineering et de l'interaction avec les LLM.
    =============================================================================
    """

    @staticmethod
    def GenerateOptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/autoagent.api.ReasoningService/GenerateOptions',
            autoagent_dot_api_dot_reasoning__service__pb2.GenerateOptionsRequest.SerializeToString,
            autoagent_dot_api_dot_reasoning__service__pb2.GenerateOptionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ScoreOptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/autoagent.api.ReasoningService/ScoreOptions',
            autoagent_dot_api_dot_reasoning__service__pb2.ScoreOptionsRequest.SerializeToString,
            autoagent_dot_api_dot_reasoning__service__pb2.ScoreOptionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
