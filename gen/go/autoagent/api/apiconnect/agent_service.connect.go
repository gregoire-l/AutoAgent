// agent_service.proto

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: autoagent_api/agent_service.proto

package apiconnect

import (
	api "autoagent/api"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AgentSessionServiceName is the fully-qualified name of the AgentSessionService service.
	AgentSessionServiceName = "autoagent_api.AgentSessionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentSessionServiceStartSessionProcedure is the fully-qualified name of the AgentSessionService's
	// StartSession RPC.
	AgentSessionServiceStartSessionProcedure = "/autoagent_api.AgentSessionService/StartSession"
	// AgentSessionServiceExecuteStepProcedure is the fully-qualified name of the AgentSessionService's
	// ExecuteStep RPC.
	AgentSessionServiceExecuteStepProcedure = "/autoagent_api.AgentSessionService/ExecuteStep"
	// AgentSessionServiceStopSessionProcedure is the fully-qualified name of the AgentSessionService's
	// StopSession RPC.
	AgentSessionServiceStopSessionProcedure = "/autoagent_api.AgentSessionService/StopSession"
)

// AgentSessionServiceClient is a client for the autoagent_api.AgentSessionService service.
type AgentSessionServiceClient interface {
	// Démarre une nouvelle session d'agent, provisionne les ressources (sandbox)
	// et retourne un ID de session unique.
	StartSession(context.Context, *connect.Request[api.StartSessionRequest]) (*connect.Response[api.StartSessionResponse], error)
	// Exécute une "étape" de travail au sein d'une session existante.
	// C'est un RPC avec streaming bi-directionnel pour l'observabilité en temps réel.
	ExecuteStep(context.Context) *connect.BidiStreamForClient[api.ExecuteStepRequest, api.ExecuteStepResponse]
	// Termine une session, finalise le travail et libère les ressources.
	StopSession(context.Context, *connect.Request[api.StopSessionRequest]) (*connect.Response[api.StopSessionResponse], error)
}

// NewAgentSessionServiceClient constructs a client for the autoagent_api.AgentSessionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentSessionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentSessionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	agentSessionServiceMethods := api.File_autoagent_api_agent_service_proto.Services().ByName("AgentSessionService").Methods()
	return &agentSessionServiceClient{
		startSession: connect.NewClient[api.StartSessionRequest, api.StartSessionResponse](
			httpClient,
			baseURL+AgentSessionServiceStartSessionProcedure,
			connect.WithSchema(agentSessionServiceMethods.ByName("StartSession")),
			connect.WithClientOptions(opts...),
		),
		executeStep: connect.NewClient[api.ExecuteStepRequest, api.ExecuteStepResponse](
			httpClient,
			baseURL+AgentSessionServiceExecuteStepProcedure,
			connect.WithSchema(agentSessionServiceMethods.ByName("ExecuteStep")),
			connect.WithClientOptions(opts...),
		),
		stopSession: connect.NewClient[api.StopSessionRequest, api.StopSessionResponse](
			httpClient,
			baseURL+AgentSessionServiceStopSessionProcedure,
			connect.WithSchema(agentSessionServiceMethods.ByName("StopSession")),
			connect.WithClientOptions(opts...),
		),
	}
}

// agentSessionServiceClient implements AgentSessionServiceClient.
type agentSessionServiceClient struct {
	startSession *connect.Client[api.StartSessionRequest, api.StartSessionResponse]
	executeStep  *connect.Client[api.ExecuteStepRequest, api.ExecuteStepResponse]
	stopSession  *connect.Client[api.StopSessionRequest, api.StopSessionResponse]
}

// StartSession calls autoagent_api.AgentSessionService.StartSession.
func (c *agentSessionServiceClient) StartSession(ctx context.Context, req *connect.Request[api.StartSessionRequest]) (*connect.Response[api.StartSessionResponse], error) {
	return c.startSession.CallUnary(ctx, req)
}

// ExecuteStep calls autoagent_api.AgentSessionService.ExecuteStep.
func (c *agentSessionServiceClient) ExecuteStep(ctx context.Context) *connect.BidiStreamForClient[api.ExecuteStepRequest, api.ExecuteStepResponse] {
	return c.executeStep.CallBidiStream(ctx)
}

// StopSession calls autoagent_api.AgentSessionService.StopSession.
func (c *agentSessionServiceClient) StopSession(ctx context.Context, req *connect.Request[api.StopSessionRequest]) (*connect.Response[api.StopSessionResponse], error) {
	return c.stopSession.CallUnary(ctx, req)
}

// AgentSessionServiceHandler is an implementation of the autoagent_api.AgentSessionService service.
type AgentSessionServiceHandler interface {
	// Démarre une nouvelle session d'agent, provisionne les ressources (sandbox)
	// et retourne un ID de session unique.
	StartSession(context.Context, *connect.Request[api.StartSessionRequest]) (*connect.Response[api.StartSessionResponse], error)
	// Exécute une "étape" de travail au sein d'une session existante.
	// C'est un RPC avec streaming bi-directionnel pour l'observabilité en temps réel.
	ExecuteStep(context.Context, *connect.BidiStream[api.ExecuteStepRequest, api.ExecuteStepResponse]) error
	// Termine une session, finalise le travail et libère les ressources.
	StopSession(context.Context, *connect.Request[api.StopSessionRequest]) (*connect.Response[api.StopSessionResponse], error)
}

// NewAgentSessionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentSessionServiceHandler(svc AgentSessionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentSessionServiceMethods := api.File_autoagent_api_agent_service_proto.Services().ByName("AgentSessionService").Methods()
	agentSessionServiceStartSessionHandler := connect.NewUnaryHandler(
		AgentSessionServiceStartSessionProcedure,
		svc.StartSession,
		connect.WithSchema(agentSessionServiceMethods.ByName("StartSession")),
		connect.WithHandlerOptions(opts...),
	)
	agentSessionServiceExecuteStepHandler := connect.NewBidiStreamHandler(
		AgentSessionServiceExecuteStepProcedure,
		svc.ExecuteStep,
		connect.WithSchema(agentSessionServiceMethods.ByName("ExecuteStep")),
		connect.WithHandlerOptions(opts...),
	)
	agentSessionServiceStopSessionHandler := connect.NewUnaryHandler(
		AgentSessionServiceStopSessionProcedure,
		svc.StopSession,
		connect.WithSchema(agentSessionServiceMethods.ByName("StopSession")),
		connect.WithHandlerOptions(opts...),
	)
	return "/autoagent_api.AgentSessionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentSessionServiceStartSessionProcedure:
			agentSessionServiceStartSessionHandler.ServeHTTP(w, r)
		case AgentSessionServiceExecuteStepProcedure:
			agentSessionServiceExecuteStepHandler.ServeHTTP(w, r)
		case AgentSessionServiceStopSessionProcedure:
			agentSessionServiceStopSessionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentSessionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentSessionServiceHandler struct{}

func (UnimplementedAgentSessionServiceHandler) StartSession(context.Context, *connect.Request[api.StartSessionRequest]) (*connect.Response[api.StartSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autoagent_api.AgentSessionService.StartSession is not implemented"))
}

func (UnimplementedAgentSessionServiceHandler) ExecuteStep(context.Context, *connect.BidiStream[api.ExecuteStepRequest, api.ExecuteStepResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("autoagent_api.AgentSessionService.ExecuteStep is not implemented"))
}

func (UnimplementedAgentSessionServiceHandler) StopSession(context.Context, *connect.Request[api.StopSessionRequest]) (*connect.Response[api.StopSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autoagent_api.AgentSessionService.StopSession is not implemented"))
}
