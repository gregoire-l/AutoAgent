// reasoning_service.proto

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: autoagent_api/reasoning_service.proto

package apiconnect

import (
	api "autoagent/api"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReasoningServiceName is the fully-qualified name of the ReasoningService service.
	ReasoningServiceName = "autoagent_api.ReasoningService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReasoningServiceGenerateOptionsProcedure is the fully-qualified name of the ReasoningService's
	// GenerateOptions RPC.
	ReasoningServiceGenerateOptionsProcedure = "/autoagent_api.ReasoningService/GenerateOptions"
	// ReasoningServiceScoreOptionsProcedure is the fully-qualified name of the ReasoningService's
	// ScoreOptions RPC.
	ReasoningServiceScoreOptionsProcedure = "/autoagent_api.ReasoningService/ScoreOptions"
)

// ReasoningServiceClient is a client for the autoagent_api.ReasoningService service.
type ReasoningServiceClient interface {
	// Demande au service de générer une liste d'options de tâches potentielles.
	GenerateOptions(context.Context, *connect.Request[api.GenerateOptionsRequest]) (*connect.Response[api.GenerateOptionsResponse], error)
	// Demande au service de scorer une liste de tâches potentielles.
	ScoreOptions(context.Context, *connect.Request[api.ScoreOptionsRequest]) (*connect.Response[api.ScoreOptionsResponse], error)
}

// NewReasoningServiceClient constructs a client for the autoagent_api.ReasoningService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReasoningServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReasoningServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	reasoningServiceMethods := api.File_autoagent_api_reasoning_service_proto.Services().ByName("ReasoningService").Methods()
	return &reasoningServiceClient{
		generateOptions: connect.NewClient[api.GenerateOptionsRequest, api.GenerateOptionsResponse](
			httpClient,
			baseURL+ReasoningServiceGenerateOptionsProcedure,
			connect.WithSchema(reasoningServiceMethods.ByName("GenerateOptions")),
			connect.WithClientOptions(opts...),
		),
		scoreOptions: connect.NewClient[api.ScoreOptionsRequest, api.ScoreOptionsResponse](
			httpClient,
			baseURL+ReasoningServiceScoreOptionsProcedure,
			connect.WithSchema(reasoningServiceMethods.ByName("ScoreOptions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// reasoningServiceClient implements ReasoningServiceClient.
type reasoningServiceClient struct {
	generateOptions *connect.Client[api.GenerateOptionsRequest, api.GenerateOptionsResponse]
	scoreOptions    *connect.Client[api.ScoreOptionsRequest, api.ScoreOptionsResponse]
}

// GenerateOptions calls autoagent_api.ReasoningService.GenerateOptions.
func (c *reasoningServiceClient) GenerateOptions(ctx context.Context, req *connect.Request[api.GenerateOptionsRequest]) (*connect.Response[api.GenerateOptionsResponse], error) {
	return c.generateOptions.CallUnary(ctx, req)
}

// ScoreOptions calls autoagent_api.ReasoningService.ScoreOptions.
func (c *reasoningServiceClient) ScoreOptions(ctx context.Context, req *connect.Request[api.ScoreOptionsRequest]) (*connect.Response[api.ScoreOptionsResponse], error) {
	return c.scoreOptions.CallUnary(ctx, req)
}

// ReasoningServiceHandler is an implementation of the autoagent_api.ReasoningService service.
type ReasoningServiceHandler interface {
	// Demande au service de générer une liste d'options de tâches potentielles.
	GenerateOptions(context.Context, *connect.Request[api.GenerateOptionsRequest]) (*connect.Response[api.GenerateOptionsResponse], error)
	// Demande au service de scorer une liste de tâches potentielles.
	ScoreOptions(context.Context, *connect.Request[api.ScoreOptionsRequest]) (*connect.Response[api.ScoreOptionsResponse], error)
}

// NewReasoningServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReasoningServiceHandler(svc ReasoningServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	reasoningServiceMethods := api.File_autoagent_api_reasoning_service_proto.Services().ByName("ReasoningService").Methods()
	reasoningServiceGenerateOptionsHandler := connect.NewUnaryHandler(
		ReasoningServiceGenerateOptionsProcedure,
		svc.GenerateOptions,
		connect.WithSchema(reasoningServiceMethods.ByName("GenerateOptions")),
		connect.WithHandlerOptions(opts...),
	)
	reasoningServiceScoreOptionsHandler := connect.NewUnaryHandler(
		ReasoningServiceScoreOptionsProcedure,
		svc.ScoreOptions,
		connect.WithSchema(reasoningServiceMethods.ByName("ScoreOptions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/autoagent_api.ReasoningService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReasoningServiceGenerateOptionsProcedure:
			reasoningServiceGenerateOptionsHandler.ServeHTTP(w, r)
		case ReasoningServiceScoreOptionsProcedure:
			reasoningServiceScoreOptionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReasoningServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReasoningServiceHandler struct{}

func (UnimplementedReasoningServiceHandler) GenerateOptions(context.Context, *connect.Request[api.GenerateOptionsRequest]) (*connect.Response[api.GenerateOptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autoagent_api.ReasoningService.GenerateOptions is not implemented"))
}

func (UnimplementedReasoningServiceHandler) ScoreOptions(context.Context, *connect.Request[api.ScoreOptionsRequest]) (*connect.Response[api.ScoreOptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autoagent_api.ReasoningService.ScoreOptions is not implemented"))
}
