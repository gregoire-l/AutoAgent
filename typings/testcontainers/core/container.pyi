"""
This type stub file was generated by pyright.
"""

from os import PathLike
from socket import socket
from typing import Optional, TYPE_CHECKING, Union
from typing_extensions import Self
from testcontainers.core.docker_client import DockerClient
from testcontainers.core.network import Network
from testcontainers.core.waiting_utils import wait_container_is_ready
from docker.models.containers import Container

if TYPE_CHECKING:
    ...
logger = ...
class DockerContainer:
    """
    Basic container object to spin up Docker instances.

    .. doctest::

        >>> from testcontainers.core.container import DockerContainer
        >>> from testcontainers.core.waiting_utils import wait_for_logs

        >>> with DockerContainer("hello-world") as container:
        ...    delay = wait_for_logs(container, "Hello from Docker!")
    """
    def __init__(self, image: str, docker_client_kw: Optional[dict] = ..., **kwargs) -> None:
        ...
    
    def with_env(self, key: str, value: str) -> Self:
        ...
    
    def with_env_file(self, env_file: Union[str, PathLike]) -> Self:
        ...
    
    def with_bind_ports(self, container: int, host: Optional[int] = ...) -> Self:
        ...
    
    def with_exposed_ports(self, *ports: int) -> Self:
        ...
    
    def with_network(self, network: Network) -> Self:
        ...
    
    def with_network_aliases(self, *aliases) -> Self:
        ...
    
    def with_kwargs(self, **kwargs) -> Self:
        ...
    
    def maybe_emulate_amd64(self) -> Self:
        ...
    
    def start(self) -> Self:
        ...
    
    def stop(self, force=..., delete_volume=...) -> None:
        ...
    
    def __enter__(self) -> Self:
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        ...
    
    def get_container_host_ip(self) -> str:
        ...
    
    @wait_container_is_ready()
    def get_exposed_port(self, port: int) -> int:
        ...
    
    def with_command(self, command: str) -> Self:
        ...
    
    def with_name(self, name: str) -> Self:
        ...
    
    def with_volume_mapping(self, host: str, container: str, mode: str = ...) -> Self:
        ...
    
    def get_wrapped_container(self) -> Container:
        ...
    
    def get_docker_client(self) -> DockerClient:
        ...
    
    def get_logs(self) -> tuple[bytes, bytes]:
        ...
    
    def exec(self, command: Union[str, list[str]]) -> tuple[int, bytes]:
        ...
    


class Reaper:
    _instance: Optional[Reaper] = ...
    _container: Optional[DockerContainer] = ...
    _socket: Optional[socket] = ...
    @classmethod
    def get_instance(cls) -> Reaper:
        ...
    
    @classmethod
    def delete_instance(cls) -> None:
        ...
    


