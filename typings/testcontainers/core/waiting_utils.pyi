"""
This type stub file was generated by pyright.
"""

from typing import Callable, TYPE_CHECKING, Union
from testcontainers.core.container import DockerContainer

if TYPE_CHECKING:
    ...
logger = ...
TRANSIENT_EXCEPTIONS = ...
def wait_container_is_ready(*transient_exceptions) -> Callable:
    """
    Wait until container is ready.

    Function that spawn container should be decorated by this method Max wait is configured by
    config. Default is 120 sec. Polling interval is 1 sec.

    Args:
        *transient_exceptions: Additional transient exceptions that should be retried if raised. Any
            non-transient exceptions are fatal, and the exception is re-raised immediately.
    """
    ...

@wait_container_is_ready()
def wait_for(condition: Callable[..., bool]) -> bool:
    ...

_NOT_EXITED_STATUSES = ...
def wait_for_logs(container: DockerContainer, predicate: Union[Callable, str], timeout: float = ..., interval: float = ..., predicate_streams_and: bool = ..., raise_on_exit: bool = ...) -> float:
    """
    Wait for the container to emit logs satisfying the predicate.

    Args:
        container: Container whose logs to wait for.
        predicate: Predicate that should be satisfied by the logs. If a string, then it is used as
        the pattern for a multiline regular expression search.
        timeout: Number of seconds to wait for the predicate to be satisfied. Defaults to wait
            indefinitely.
        interval: Interval at which to poll the logs.
        predicate_streams_and: should the predicate be applied to both

    Returns:
        duration: Number of seconds until the predicate was satisfied.
    """
    ...

