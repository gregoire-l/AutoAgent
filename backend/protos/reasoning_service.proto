// reasoning_service.proto

syntax = "proto3";

package reasoning.v1;

// Importe les types partagés depuis le fichier common.
import "common/v1/common.proto";

option go_package = "github.com/auto-agent/protos/gen/go/reasoning/v1;reasoningv1";

// =============================================================================
// Le Service de Raisonnement (Reasoning Service)
//
// Interface de haut niveau pour les capacités de raisonnement de l'IA.
// Il abstrait la complexité du prompt engineering et de l'interaction avec les LLM.
// =============================================================================
service ReasoningService {
  // Demande au service de générer une liste d'options de tâches potentielles.
  rpc GenerateOptions(GenerateOptionsRequest) returns (GenerateOptionsResponse);

  // Demande au service de scorer une liste de tâches potentielles.
  rpc ScoreOptions(ScoreOptionsRequest) returns (ScoreOptionsResponse);
}

// --- Messages pour le RPC GenerateOptions ---

message GenerateOptionsRequest {
  string request_id = 1;          // Clé d'idempotence.
  string mission_id = 2;
  string current_task_prompt = 3;
  string factual_context = 4;
  string generation_directive = 5;
}

message GenerateOptionsResponse {
  repeated common.v1.PotentialTask potential_tasks = 1;
}

// --- Messages pour le RPC ScoreOptions ---

message ScoreOptionsRequest {
  string request_id = 1;          // Clé d'idempotence.
  string mission_id = 2;
  string shared_context = 3;      // Contexte partagé (ex: code source) pour le lot.
  repeated common.v1.PotentialTask tasks_to_score = 4;
}

message ScoreOptionsResponse {
  // La réponse est une liste de résultats, permettant les succès partiels.
  repeated ScoreResult results = 1;
}

// Un résultat de scoring pour une seule tâche.
message ScoreResult {
  string id = 1; // L'ID de la PotentialTask correspondante pour le mapping.

  oneof result {
    ScoredOption success = 2;
    common.v1.Error error = 3;
  }
}

// Contient les détails d'un scoring réussi pour une option.
message ScoredOption {
  Score score = 1;
  string rationale = 2;
  float model_confidence = 3; // Confiance du modèle dans cette prédiction (0.0-1.0).
}

// Les scores quantitatifs objectifs estimés pour une tâche.
message Score {
  float predicted_complexity = 1;       // Échelle 1-10
  float predicted_success_probability = 2;  // Échelle 0.0-1.0
  float predicted_cost = 3;               // Échelle 1-10
}