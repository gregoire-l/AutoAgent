package models

import (
	"time"
)

// Mission represents a high-level mission to be executed
type Mission struct {
	ID        string    `json:"id"`
	Status    string    `json:"status"`
	Prompt    string    `json:"prompt"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// MissionStatus defines the possible states of a mission
type MissionStatus string

const (
	MissionStatusPending   MissionStatus = "PENDING"
	MissionStatusRunning   MissionStatus = "RUNNING"
	MissionStatusSuccess   MissionStatus = "SUCCESS"
	MissionStatusFailed    MissionStatus = "FAILED"
	MissionStatusCancelled MissionStatus = "CANCELLED"
)

// PotentialTask represents a task option generated by the reasoning service
type PotentialTask struct {
	ID     string `json:"id"`
	Prompt string `json:"prompt"`
}

// TaskScore represents a scored task option with comprehensive metrics
type TaskScore struct {
	Task                        PotentialTask `json:"task"`
	PredictedComplexity         float32       `json:"predicted_complexity"`          // Complexité de la tâche, 1-10
	PredictedSuccessProbability float32       `json:"predicted_success_probability"` // Probabilité de succès, 0-1
	PredictedCost               float32       `json:"predicted_cost"`                // Coût estimé, 1-10
	Rationale                   string        `json:"rationale"`                     // Explication du scoring
	ModelConfidence             float32       `json:"model_confidence"`              // Confiance du modèle

	// Computed overall score for convenience (can be derived from the above metrics)
	OverallScore float64 `json:"overall_score"`
}

// AgentResult represents the result of an agent execution
type AgentResult struct {
	SessionID string `json:"session_id"`
	TaskID    string `json:"task_id"`
	Status    string `json:"status"`
	Output    string `json:"output"`
	Error     string `json:"error,omitempty"`
}

// AgentExecutionStatus defines the possible states of agent execution
type AgentExecutionStatus string

const (
	AgentExecutionStatusSuccess AgentExecutionStatus = "SUCCESS"
	AgentExecutionStatusFailure AgentExecutionStatus = "FAILURE"
	AgentExecutionStatusTimeout AgentExecutionStatus = "TIMEOUT"
)

// WorkflowInput represents the input to the mission workflow
type WorkflowInput struct {
	MissionID string `json:"mission_id"`
	Prompt    string `json:"prompt"`
}

// WorkflowResult represents the result of the mission workflow
type WorkflowResult struct {
	MissionID    string        `json:"mission_id"`
	Status       MissionStatus `json:"status"`
	SelectedTask PotentialTask `json:"selected_task"`
	AgentResult  AgentResult   `json:"agent_result"`
	ErrorMessage string        `json:"error_message,omitempty"`
	CompletedAt  time.Time     `json:"completed_at"`
}

// Neo4jMissionNode represents a Mission node in Neo4j
type Neo4jMissionNode struct {
	ID        string `json:"id"`
	Status    string `json:"status"`
	Prompt    string `json:"prompt"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
}

// Neo4jTaskNode represents a Task node in Neo4j
type Neo4jTaskNode struct {
	ID     string `json:"id"`
	Prompt string `json:"prompt"`
	Status string `json:"status"`
	Output string `json:"output"`
	Error  string `json:"error,omitempty"`
}

// GenerateOptionsRequest represents the request to generate task options
type GenerateOptionsRequest struct {
	MissionPrompt string `json:"mission_prompt"`
}

// GenerateOptionsResponse represents the response from generating task options
type GenerateOptionsResponse struct {
	Tasks []PotentialTask `json:"tasks"`
}

// ScoreOptionsRequest represents the request to score task options
type ScoreOptionsRequest struct {
	Tasks []PotentialTask `json:"tasks"`
}

// ScoreOptionsResponse represents the response from scoring task options
type ScoreOptionsResponse struct {
	Scores []TaskScore `json:"scores"`
}

// StartSessionRequest represents the request to start an agent session
type StartSessionRequest struct {
	Task PotentialTask `json:"task"`
}

// StartSessionResponse represents the response from starting an agent session
type StartSessionResponse struct {
	SessionID string `json:"session_id"`
}

// ExecuteStepRequest represents the request to execute a step in an agent session
type ExecuteStepRequest struct {
	SessionID string `json:"session_id"`
	Directive string `json:"directive"`
}

// ExecuteStepResponse represents the response from executing a step
type ExecuteStepResponse struct {
	Result AgentResult `json:"result"`
}

// StopSessionRequest represents the request to stop an agent session
type StopSessionRequest struct {
	SessionID string `json:"session_id"`
}

// StopSessionResponse represents the response from stopping an agent session
type StopSessionResponse struct {
	Success bool `json:"success"`
}

// NewMission creates a new Mission with default values
func NewMission(id, prompt string) *Mission {
	now := time.Now()
	return &Mission{
		ID:        id,
		Status:    string(MissionStatusPending),
		Prompt:    prompt,
		CreatedAt: now,
		UpdatedAt: now,
	}
}

// UpdateStatus updates the mission status and timestamp
func (m *Mission) UpdateStatus(status MissionStatus) {
	m.Status = string(status)
	m.UpdatedAt = time.Now()
}

// IsCompleted returns true if the mission is in a terminal state
func (m *Mission) IsCompleted() bool {
	status := MissionStatus(m.Status)
	return status == MissionStatusSuccess ||
		status == MissionStatusFailed ||
		status == MissionStatusCancelled
}

// NewWorkflowInput creates a new WorkflowInput
func NewWorkflowInput(missionID, prompt string) *WorkflowInput {
	return &WorkflowInput{
		MissionID: missionID,
		Prompt:    prompt,
	}
}

// NewWorkflowResult creates a new WorkflowResult
func NewWorkflowResult(missionID string, status MissionStatus) *WorkflowResult {
	return &WorkflowResult{
		MissionID:   missionID,
		Status:      status,
		CompletedAt: time.Now(),
	}
}
